{"version":3,"sources":["image/bg.png","components/style/StyledDisplay.ts","components/Display.tsx","components/style/StyledCell.ts","utils/constants.ts","utils/stageUtil.ts","components/Cell.tsx","components/style/StyledStage.ts","components/StageContainer.tsx","components/style/StyledStartButton.ts","components/StartButton.tsx","components/style/StyledTetris.ts","components/style/StyledWrapper.ts","utils/useGameState.ts","utils/transpose.ts","utils/usePlayerContext.ts","utils/useStage.ts","components/Tetris.tsx","utils/useInterval.ts","App.tsx","index.tsx"],"names":["module","exports","StyledDisplay","styled","div","props","gg","memo","text","StyledCell","color","type","tetrisConfig","0","shape","I","J","L","O","S","Z","T","EMPTY_ROW","Array","fill","getTetris","key","checkExist","randomTetris","tetrisPool","random","Math","floor","length","createStage","from","checkCollision","pc","stage","positionDiff","diffX","x","diffY","y","tetris","some","row","cell","futureY","position","futureX","StyledStage","height","width","className","map","i","j","StyledStartButton","button","onClick","StyledTetris","StyledWrapper","bg","linePoints","transpose","matrix","direction","rotated","_","col","reverse","usePlayerContext","useState","collided","playerContext","setPlayerContext","reset","useCallback","STAGE_WIDTH","p","prev","undefined","clonedContext","JSON","parse","stringify","offset","useStage","setStage","clearedLines","setClearedLines","useEffect","updateStage","newStage","forEach","reduce","counter","every","unshift","push","swipeRows","dropTime","setDropTime","setGG","updatePosition","rotateTetris","score","setScore","level","setLevel","lines","setLines","scoreCalculator","useGameState","moveTetris","getSpeed","drop","dropTetris","swipeHandlers","useSwipeable","onSwipedLeft","onSwipedRight","onSwipedDown","onSwipedUp","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","keyCode","keyDown","onKeyUp","keyUp","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55dfe482.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.935196ef.png\";","import styled from 'styled-components';\n\ninterface Props {\n  gg?: boolean;\n}\n\nexport const StyledDisplay = styled.div<Props>`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${(props: Props): string => (props.gg ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n","import PropTypes from 'prop-types';\nimport React, { memo } from 'react';\nimport { StyledDisplay } from './style/StyledDisplay';\n\ninterface Props {\n  text?: string;\n  gg?: boolean;\n}\nconst Display: React.FC<Props> = (props: Props) => {\n  const { gg, text } = props;\n  return <StyledDisplay gg={gg}>{gg ? 'Game Over' : text}</StyledDisplay>;\n};\n\nDisplay.propTypes = {\n  text: PropTypes.string,\n};\n\nexport default memo(Display);\n","import styled from 'styled-components';\n\ninterface Props {\n  color: string;\n  type: string | number;\n}\n\nexport const StyledCell = styled.div<Props>`\n  width: auto;\n  background: rgba(${(props: Props): string => props.color}, 0.8);\n  border: ${(props: Props): string =>\n    props.type === 0 ? '0px solid' : '4px solid'};\n  border-bottom-color: rgba(${(props: Props): string => props.color}, 0.1);\n  border-right-color: rgba(${(props: Props): string => props.color}, 1);\n  border-top-color: rgba(${(props: Props): string => props.color}, 1);\n  border-left-color: rgba(${(props: Props): string => props.color}, 0.3);\n`;\n","import { TetrisConfig } from '../types';\n\n// RGB color\n// each tetromino is a N x N area\nexport const tetrisConfig: TetrisConfig = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n    shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\n    color: '80, 227, 230',\n  },\n  J: {\n    shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]],\n    color: '36, 95, 223',\n  },\n  L: {\n    shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\n    color: '223, 173, 36',\n  },\n  O: {\n    shape: [['O', 'O'], ['O', 'O']],\n    color: '223, 217, 36',\n  },\n  S: {\n    shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]],\n    color: '48, 211, 56',\n  },\n  Z: {\n    shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]],\n    color: '227, 78, 78',\n  },\n  T: {\n    shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\n    color: '132, 61, 198',\n  },\n};\n","import { tetrisConfig } from './constants';\nimport { Cell, PlayerContext, Position, Stage, Tetris } from '../types';\n\nexport const STAGE_HEIGHT = 20;\nexport const STAGE_WIDTH = 12;\n\nexport const EMPTY_ROW = new Array(STAGE_WIDTH).fill([0, 'clear']);\n\nconst checkExist = (key: string | number): boolean => key in tetrisConfig;\n\nexport const getTetris = (key: string | number): Tetris => {\n  if (!checkExist(key)) {\n    const err = 'Invalid Key';\n    throw err;\n  }\n  return tetrisConfig[key];\n};\n\nexport const randomTetris = (): Tetris => {\n  const tetrisPool: Array<string> = ['I', 'T', 'S', 'Z', 'O', 'J', 'L'];\n  const random: number = Math.floor(Math.random() * tetrisPool.length);\n  return getTetris(tetrisPool[random]);\n};\n\nexport const createStage = (): Stage =>\n  Array.from(Array(STAGE_HEIGHT), () => EMPTY_ROW);\n\nexport const checkCollision = (\n  pc: PlayerContext,\n  stage: Stage,\n  positionDiff: Position,\n): boolean => {\n  const { x: diffX, y: diffY } = positionDiff;\n\n  // pc.tetris 表示目前在移動的這顆方塊\n  return pc.tetris.some((row: Cell, y: number): boolean => {\n    return row.some((cell: string | number, x: number): boolean => {\n      // cell表示此方塊中的某格\n      if (cell !== 0) {\n        // y + pc.position.y + nextY = 此cell在移動後的位置\n        const futureY = y + pc.position.y + diffY;\n        const futureX = x + pc.position.x + diffX;\n        const collided =\n          !stage[futureY] ||\n          !stage[futureY][futureX] ||\n          stage[futureY][futureX][1] !== 'clear';\n\n        return collided;\n      } else {\n        return false;\n      }\n    });\n  });\n};\n","import PropTypes from 'prop-types';\nimport React, { ReactElement, memo } from 'react';\nimport { StyledCell } from './style/StyledCell';\nimport { getTetris } from '../utils/stageUtil';\n\ninterface Props {\n  key: string;\n  type: string | number;\n}\n\nconst Cell: React.FC<Props> = ({ type }): ReactElement => (\n  <StyledCell type={type} color={getTetris(type).color} />\n);\n\nCell.propTypes = {\n  type: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n};\n\nexport default memo(Cell);\n","import styled from 'styled-components';\n\ninterface Props {\n  width: number;\n  height: number;\n}\n\nexport const StyledStage = styled.div<Props>`\n  display: grid;\n  grid-template-rows: repeat(\n    ${(props: Props): number => props.height},\n    calc(25vw / ${(props: Props): number => props.width})\n  );\n  grid-template-columns: repeat(${(props: Props): number => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  height: 100%;\n  max-width: 25vw;\n  background: #111;\n`;\n","import Cell from './Cell';\nimport PropTypes from 'prop-types';\nimport React, { memo } from 'react';\nimport { StyledStage } from './style/StyledStage';\n\ninterface Props {\n  stage: Array<Array<Array<string | number>>>;\n}\n\nconst StageContainer: React.FC<Props> = ({ stage }) => {\n  return (\n    <StyledStage\n      className=\"stage-container\"\n      width={stage[0].length}\n      height={stage.length}\n    >\n      {stage.map((row, i) =>\n        row.map((cell, j) => <Cell key={`${i}_${j}`} type={cell[0]} />),\n      )}\n    </StyledStage>\n  );\n};\n\nStageContainer.propTypes = {\n  stage: PropTypes.array.isRequired,\n};\n\nexport default memo(StageContainer);\n","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n","import PropTypes from 'prop-types';\nimport React, { memo } from 'react';\nimport { StyledStartButton } from './style/StyledStartButton';\n\ninterface Props {\n  onClick: (e: React.MouseEvent) => void;\n}\n\nconst StartButton: React.FC<Props> = ({ onClick }) => {\n  return <StyledStartButton onClick={onClick}>Start!</StyledStartButton>;\n};\n\nStartButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default memo(StartButton);\n","import styled from 'styled-components';\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-item: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0px 20px;\n  }\n`;\n","import styled from 'styled-components';\nimport bg from '../../image/bg.png';\n\nexport const StyledWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bg}) #000;\n  background-size: cover;\n  overflow: hidden;\n`;\n","import {\n  useState,\n  useCallback,\n  useEffect,\n  Dispatch,\n  SetStateAction,\n} from 'react';\n\ntype SetStateFunc = Dispatch<SetStateAction<number>>;\n\nconst linePoints = [40, 100, 300, 1000];\n\nexport const useGameState = (\n  clearedLines: number,\n): [number, SetStateFunc, number, SetStateFunc, number, SetStateFunc] => {\n  const [score, setScore] = useState<number>(0);\n  const [level, setLevel] = useState<number>(0);\n  const [lines, setLines] = useState<number>(0);\n\n  const scoreCalculator = useCallback(() => {\n    if (clearedLines > 0) {\n      setScore(prev => prev + linePoints[clearedLines - 1] * (level + 1));\n      setLines(prev => prev + clearedLines);\n    }\n  }, [clearedLines, level]);\n\n  useEffect(() => {\n    scoreCalculator();\n  }, [scoreCalculator, clearedLines, score]);\n\n  return [score, setScore, level, setLevel, lines, setLines];\n};\n","import { Cell } from '../types';\ntype TwoDArray = Array<Cell>;\n\nconst transpose = (matrix: TwoDArray, direction: number): TwoDArray => {\n  const rotated = matrix.map((_, i: number): Cell => matrix.map(col => col[i]));\n\n  if (direction > 0) {\n    //clockwise\n    return rotated.map((row: Cell): Cell => row.reverse());\n  }\n  return rotated.reverse();\n};\n\nexport default transpose;\n","import { PlayerContext, Position, Stage } from '../types';\nimport { tetrisConfig } from './constants';\nimport { randomTetris, checkCollision, STAGE_WIDTH } from './stageUtil';\nimport { useState, useCallback } from 'react';\nimport transpose from './transpose';\n\ntype Param = Position & { collided?: boolean };\ntype ReturnType = [\n  PlayerContext,\n  (p: Param) => void,\n  () => void,\n  (stage: Stage, dir: number) => void,\n];\n\nexport const usePlayerContext = (): ReturnType => {\n  const [playerContext, setPlayerContext] = useState<PlayerContext>({\n    position: { x: 0, y: 0 },\n    tetris: tetrisConfig[0].shape,\n    collided: false,\n  });\n\n  const updatePosition = (p: Param): void => {\n    const { x, y, collided } = p;\n    setPlayerContext(\n      (prev: PlayerContext): PlayerContext => ({\n        ...prev,\n        ...(collided !== undefined && { collided }),\n        position: {\n          x: prev.position.x + x,\n          y: prev.position.y + y,\n        },\n      }),\n    );\n  };\n\n  const reset = useCallback(() => {\n    setPlayerContext({\n      position: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetris: randomTetris().shape,\n      collided: false,\n    });\n  }, []);\n\n  const rotateTetris = (stage: Stage, direction: number): void => {\n    //deep clone\n    const clonedContext: PlayerContext = JSON.parse(\n      JSON.stringify(playerContext),\n    );\n    clonedContext.tetris = transpose(clonedContext.tetris, direction);\n\n    let offset = 1;\n\n    // 有碰撞就往左右移動，直到無法移動\n    while (checkCollision(clonedContext, stage, { x: 0, y: 0 })) {\n      // +1, -1 ,+2, -2, ...\n      // offset 超過方塊的 N x N area表示無法旋轉，回傳原本的context\n      clonedContext.position.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedContext.tetris[0].length) {\n        transpose(clonedContext.tetris, -direction);\n        clonedContext.position.x = playerContext.position.x;\n        return;\n      }\n    }\n\n    setPlayerContext(clonedContext);\n  };\n\n  return [playerContext, updatePosition, reset, rotateTetris];\n};\n","import { createStage, EMPTY_ROW } from './stageUtil';\nimport { Stage, PlayerContext, Cell, Shape } from '../types';\nimport { useState, useEffect } from 'react';\n\nexport const useStage: Function = (\n  pc: PlayerContext,\n  reset: Function,\n): [Stage, Function, number] => {\n  const [stage, setStage] = useState<Stage>(createStage());\n  const [clearedLines, setClearedLines] = useState<number>(0);\n\n  useEffect((): void => {\n    setClearedLines(0);\n\n    const swipeRows = (stage: Stage): Stage =>\n      stage.reduce((counter: Stage, row: Shape): Stage => {\n        const isFullRow = row.every((cell: Cell) => cell[0] !== 0);\n\n        if (isFullRow) {\n          setClearedLines(prev => prev + 1);\n\n          counter.unshift(EMPTY_ROW);\n          return counter;\n        }\n        // return counter + d;\n        counter.push(row);\n\n        return counter;\n      }, []);\n\n    const updateStage = (prev: Stage): Stage => {\n      const newStage = prev.map((row: Shape) =>\n        row.map((cell: Cell) => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n\n      //render tetris cell\n      pc.tetris.forEach((row: Array<number | string>, y: number): void => {\n        row.forEach((cell: number | string, x: number): void => {\n          if (cell !== 0) {\n            //occupied\n            newStage[y + pc.position.y][x + pc.position.x] = [\n              cell,\n              `${pc.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n\n      // 碰到東西\n      if (pc.collided) {\n        reset();\n        return swipeRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage((prev: Stage): Stage => updateStage(prev));\n  }, [pc, reset]);\n\n  return [stage, setStage, clearedLines];\n};\n","import Display from './Display';\nimport React, { useState, ReactElement, memo } from 'react';\nimport StageContainer from './StageContainer';\nimport StartButton from './StartButton';\nimport { Position, Stage } from '../types';\nimport { StyledTetris } from './style/StyledTetris';\nimport { StyledWrapper } from './style/StyledWrapper';\nimport { createStage, checkCollision } from '../utils/stageUtil';\nimport { useGameState } from '../utils/useGameState';\nimport { useInterval } from '../utils/useInterval';\nimport { usePlayerContext } from '../utils/usePlayerContext';\nimport { useStage } from '../utils/useStage';\nimport { useSwipeable } from 'react-swipeable';\n\nconst Tetris: React.FC = (): ReactElement => {\n  const [dropTime, setDropTime] = useState<number | null>(null);\n  const [gg, setGG] = useState(false);\n\n  const [\n    playerContext,\n    updatePosition,\n    reset,\n    rotateTetris,\n  ] = usePlayerContext();\n  const [stage, setStage, clearedLines]: [Stage, Function, number] = useStage(\n    playerContext,\n    reset,\n  );\n\n  const [score, setScore, level, setLevel, lines, setLines] = useGameState(\n    clearedLines,\n  );\n\n  const start = (): void => {\n    setStage(createStage());\n    setDropTime(1000);\n    reset();\n    setScore(0);\n    setLines(0);\n    setLevel(0);\n    setGG(false);\n  };\n\n  const moveTetris = (direction: number): void => {\n    const positionDiff: Position = { x: direction, y: 0 };\n    if (!checkCollision(playerContext, stage, positionDiff)) {\n      updatePosition(positionDiff);\n    }\n  };\n\n  const getSpeed = (): number => 1000 / (level + 1) + 200;\n\n  const drop = (): void => {\n    if (lines > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      setDropTime(getSpeed());\n    }\n\n    const positionDiff: Position = { x: 0, y: 1 };\n    if (!checkCollision(playerContext, stage, positionDiff)) {\n      updatePosition({ ...positionDiff, collided: false });\n    } else {\n      //到頂了\n      if (playerContext.position.y < 1) {\n        setGG(true);\n        setDropTime(null);\n      }\n\n      //到底了\n      updatePosition({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropTetris = (): void => {\n    setDropTime(null);\n    drop();\n  };\n\n  const keyDown = (e: React.KeyboardEvent<object>): void => {\n    const { keyCode } = e;\n\n    if (!gg) {\n      if (keyCode === 37) {\n        moveTetris(-1);\n      } else if (keyCode === 39) {\n        moveTetris(1);\n      } else if (keyCode === 40) {\n        dropTetris();\n      } else if (keyCode === 38) {\n        // up\n        rotateTetris(stage, 1);\n      } else if (keyCode === 90) {\n        //z\n        rotateTetris(stage, -1);\n      }\n    }\n  };\n\n  const keyUp = (e: React.KeyboardEvent<object>): void => {\n    const { keyCode } = e;\n    if (keyCode === 40 && !gg) {\n      setDropTime(getSpeed());\n    }\n  };\n\n  const swipeHandlers = useSwipeable({\n    onSwipedLeft: () => {\n      moveTetris(-1);\n    },\n    onSwipedRight: () => {\n      moveTetris(1);\n    },\n    onSwipedDown: () => {\n      dropTetris();\n    },\n    onSwipedUp: () => {\n      rotateTetris(stage, 1);\n    },\n  });\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledWrapper\n      className=\"app\"\n      role=\"button\"\n      tabIndex={0}\n      onKeyDown={(e): void => keyDown(e)}\n      onKeyUp={(e): void => keyUp(e)}\n      {...swipeHandlers}\n    >\n      <StyledTetris className=\"game-panel\">\n        <StageContainer stage={stage} />\n        <aside>\n          {gg ? (\n            <Display gg />\n          ) : (\n            <>\n              <Display text={`Score:  ${score}`} />\n              <Display text={`Lines:  ${lines}`} />\n              <Display text={`Level:  ${level}`} />\n            </>\n          )}\n          <StartButton onClick={start} />\n        </aside>\n      </StyledTetris>\n    </StyledWrapper>\n  );\n};\n\nexport default memo(Tetris);\n","// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nimport { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback: Function, delay: number | null): void => {\n  const savedCallback = useRef<Function>();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick(): void {\n      typeof savedCallback.current === 'function' && savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return (): void => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n};\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App: React.FC = () => {\n  return <Tetris />;\n};\n\nexport default App;\n","import './index.css';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}